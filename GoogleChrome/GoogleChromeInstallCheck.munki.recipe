<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Description</key>
    <string>Downloads the latest Google Chrome disk image and imports into Munki along with an installcheck_script.</string>
    <key>Identifier</key>
    <string>com.github.aysiu.munki.GoogleChromeInstallCheck</string>
    <key>Input</key>
    <dict>
        <key>NAME</key>
        <string>GoogleChrome</string>
        <key>MUNKI_REPO_SUBDIR</key>
        <string>apps</string>
        <key>pkginfo</key>
        <dict>
            <key>catalogs</key>
            <array>
                <string>testing</string>
            </array>
            <key>description</key>
            <string>Chrome is a fast, simple, and secure web browser, built for the modern web.</string>
            <key>display_name</key>
            <string>Google Chrome</string>
            <key>name</key>
            <string>%NAME%</string>
            <key>developer</key>
            <string>Google</string>
            <key>category</key>
            <string>Web Browsers</string>
            <key>unattended_install</key>
            <true/>
            <key>postinstall_script</key>
            <string>#!/bin/zsh

# Since the installcheck_script checks for the running version of Chrome, kill any existing (stray) Chrome processes, as Munki may end up in an install loop otherwise. Blocking applications based on the installs array means Chrome should already not be running.
stray_chrome=$(/bin/ps -axo command= | /usr/bin/grep "Google Chrome" | /usr/bin/grep -v "grep")

if [[ ! -z "$stray_chrome" ]]; then
    /bin/echo "There was at least one stray Chrome process, so killing Chrome"
    /usr/bin/killall "Google Chrome"
fi
</string>
        </dict>
    </dict>
    <key>MinimumVersion</key>
    <string>0.2.0</string>
    <key>ParentRecipe</key>
    <string>com.github.autopkg.download.googlechrome</string>
    <key>Process</key>
    <array>
        <dict>
            <key>Arguments</key>
            <dict>
                <key>input_plist_path</key>
                <string>%pathname%/Google Chrome.app/Contents/Info.plist</string>
            </dict>
            <key>Processor</key>
            <string>Versioner</string>
        </dict>
        <dict>
            <key>Arguments</key>
            <dict>
                <key>additional_pkginfo</key>
                <dict>
                    <key>installcheck_script</key>
                    <string>#!/bin/zsh

# Based loosely on https://github.com/grahamgilbert/chrome_update_notifier/blob/master/payload/Library/Management/chrome_update_notifier.py

autoload is-at-least

desired_version='%version%'
chrome_plist='/Applications/Google Chrome.app/Contents/Info.plist'

if [[ ! -f $chrome_plist ]]; then
    /bin/echo 'Missing $chrome_plist, so Chrome not installed.'
    exit 0
fi

installed_version=$(/usr/bin/defaults read $chrome_plist CFBundleShortVersionString)

if is-at-least $desired_version $installed_version; then
    /bin/echo "Installed version $installed_version is at least $desired_version, so we can check the running version."
else
    /bin/echo "Installed version $installed_version isn't at least $desired_version."
    exit 0
fi

running_apps=$(/bin/ps -axo command= | /usr/bin/grep "/Applications/Google Chrome.app/Contents/Frameworks/Google Chrome Framework.framework/Versions/" -m 1)

if [[ $running_apps =~ "/Applications/Google Chrome.app/Contents/Frameworks/Google Chrome Framework.framework/Versions/(.*)/Helpers/.*" ]]; then
    running_version=$match[1]
    if is-at-least $desired_version $running_version; then
        /bin/echo "Running version $running_version is at least $desired_version."
        exit 1
    else
        /bin/echo "Running version $running_version isn't at least $desired_version."
    fi
else
    /bin/echo "Can't determine running version of Chrome or Chrome isn't running, so considering installed, since the on-disk version is okay."
    exit 1
fi
</string>
                </dict>
            </dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
        </dict>
        <dict>
            <key>Arguments</key>
            <dict>
                <key>pkg_path</key>
                <string>%pathname%</string>
                <key>repo_subdirectory</key>
                <string>%MUNKI_REPO_SUBDIR%</string>
            </dict>
            <key>Processor</key>
            <string>MunkiImporter</string>
        </dict>
    </array>
</dict>
</plist>
